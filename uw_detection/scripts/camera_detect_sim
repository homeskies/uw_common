#!/usr/bin/env python
import argparse
from sys import platform

from yolov3.detector import YOLOv3Detector


if __name__ == '__main__':


    model = YOLOv3Detector()

    # model.predict_from_node('/head_external_camera/color/image_raw')
    model.predict_from_node('/head_camera/rgb/image_raw')



# if __name__ == '__main__':
#     parser = argparse.ArgumentParser()
#     parser.add_argument('--cfg', type=str, default='cfg/yolov3-spp.cfg', help='*.cfg path')
#     parser.add_argument('--names', type=str, default='data/coco.names', help='*.names path')
#     parser.add_argument('--weights', type=str, default='weights/yolov3-spp-ultralytics.pt', help='weights path')
#     parser.add_argument('--source', type=str, default='data/samples', help='source')  # input file/folder, 0 for webcam
#     parser.add_argument('--output', type=str, default='output', help='output folder')  # output folder
#     parser.add_argument('--img-size', type=int, default=416, help='inference size (pixels)')
#     parser.add_argument('--conf-thres', type=float, default=0.3, help='object confidence threshold')
#     parser.add_argument('--iou-thres', type=float, default=0.6, help='IOU threshold for NMS')
#     parser.add_argument('--fourcc', type=str, default='mp4v', help='output video codec (verify ffmpeg support)')
#     parser.add_argument('--half', action='store_true', help='half precision FP16 inference')
#     parser.add_argument('--device', default='', help='device id (i.e. 0 or 0,1) or cpu')
#     parser.add_argument('--view-img', action='store_true', help='display results')
#     parser.add_argument('--save-txt', action='store_true', help='save results to *.txt')
#     parser.add_argument('--classes', nargs='+', type=int, help='filter by class')
#     parser.add_argument('--agnostic-nms', action='store_true', help='class-agnostic NMS')
#     opt = parser.parse_args()
#     print(opt)

    # align_to = rs.stream.color
    # align = rs.align(align_to)

    # pipeline = rs.pipeline()
    # pipeline.start()

    # with torch.no_grad():
    #     detect(pipe=pipeline)
